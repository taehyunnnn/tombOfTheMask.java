package files;

import hsa2.GraphicsConsole;
import java.awt.*;

public class main {

	public static void main(String[] args) throws InterruptedException {

		new main();

	}

	static int mapX = 36 * 12;
	static int mapY = 48 * 12;
	static GraphicsConsole gc = new GraphicsConsole(mapX, mapY, "Tomb of the Mask");

	main() throws InterruptedException {

		gc.setLocationRelativeTo(null);

		final int shieldh = 8 * 12;
		final int shieldw = 36 * 12;
		final int lvlw = 64;
		final int lvlh = 64;
		final int pixel = 36;
		final int pixelstart = 12;

		int delay = 15;
		int ticks = 0;
		int seconds = 0;
		int maskticks = 1;
		Boolean SFX = true;
		int animationticks = 1;
		int spiketicks = 0;
		Boolean Spike = false;

		int MARGIN = 5 * pixel;
		int XBLOCKS = 26;
		int YBLOCKS = 46;
		int xoffset = 0;
		int yoffset = 0;

		Boolean Start = false;
		Boolean Finish = true;
		Boolean Dead = false;
		Boolean Shield = false;
		Boolean DrawMask = false;
		int Life = 1;

		int Maskx = 0;
		int Masky = 0;

		int Balance = 100;

		int mouseclick = 0;
		gc.enableMouse();
		gc.enableMouseMotion();
		gc.enableMouseWheel();

		Boolean Audio = true;

		// 1 = up; 2 = left; 3 = down; 4 = right;
		int MaskD = 0;
		Boolean Move = false;

		Boolean Lava = false;
		int LavaSpeed = 1;
		int Lavay = mapY;

		gc.setBackgroundColor(Color.BLACK);

		assets sp1 = new assets();
		assets sp2 = new assets();
		assets sp3 = new assets();
		assets sp4 = new assets();
		assets sp5 = new assets();
		assets sp6 = new assets();
		assets sp7 = new assets();
		assets sp8 = new assets();
		assets sp9 = new assets();
		assets sp10 = new assets();

		stages maps = new stages();
		int[][] map = maps.start;

		int Origin;
		int Up;
		int Left;
		int Down;
		int Right;

		gc.playSoundLoop(assets.smusic);

		while (true) {
			while (Start) {

				synchronized (gc) {

					// Clearing Console
					gc.clear();

					// Drawing Objects
					for (int row = 0; row < map.length; row++) {
						for (int col = 0; col < map[0].length; col++) {
							switch (map[row][col]) {
							case 1:
								gc.drawImage(assets.dot, col * pixel - xoffset, row * pixel - yoffset, pixel, pixel);
								break;
							case 2:
								gc.drawImage(assets.coin, col * pixel - xoffset, row * pixel - yoffset, pixel, pixel);
								break;
							case 3:
								gc.drawImage(assets.star, col * pixel - xoffset, row * pixel - yoffset, pixel, pixel);
								break;
							case 4:
								gc.drawImage(assets.exit, col * pixel - xoffset, row * pixel - yoffset, pixel, pixel);
								// Lava = false;
								break;
							case 5:
								gc.drawImage(assets.spike, col * pixel - xoffset, row * pixel - yoffset, pixel, pixel);
								break;
							case 7:
								gc.setColor(Color.WHITE);
								gc.fillRect(col * pixel - xoffset, row * pixel - yoffset, pixel, pixel);
								// gc.drawImage(spikeactive, col * pixel, row * pixel, pixel, pixel);
								// break;
								// case 8: gc.drawImage(bat, col * pixel, row * pixel, pixel, pixel); break;
								// break;

							case 9:
								if (map == maps.map6)
									gc.drawImage(assets.wall2, col * pixel - xoffset, row * pixel - yoffset, pixel,
											pixel);

								else
									gc.drawImage(assets.wall1, col * pixel - xoffset, row * pixel - yoffset, pixel,
											pixel);
								break;

							case 10:
								gc.drawImage(assets.stage1, col * pixelstart, row * pixelstart, lvlw, lvlh);
								break;
							case 20:
								gc.drawImage(assets.stage2, col * pixelstart, row * pixelstart, lvlw, lvlh);
								break;
							case 30:
								gc.drawImage(assets.stage3, col * pixelstart, row * pixelstart, lvlw, lvlh);
								break;
							case 40:
								gc.drawImage(assets.stage4, col * pixelstart, row * pixelstart, lvlw, lvlh);
								break;
							case 50:
								gc.drawImage(assets.stage5, col * pixelstart, row * pixelstart, lvlw, lvlh);
								break;
							case 60:
								gc.drawImage(assets.stage6, col * pixelstart, row * pixelstart, lvlw, lvlh);
								break;
							case 70:
								gc.drawImage(assets.stages, col * pixelstart, row * pixelstart);
								break;
							case 80:
								gc.drawImage(assets.enter, col * pixelstart, row * pixelstart);
								break;
							case 90:
								gc.drawImage(assets.esc, col * pixelstart, row * pixelstart);
								break;
							case 11:
								gc.fillRect(col * pixelstart, row * pixelstart, shieldw, shieldh);
								break;
							default:
								if (map[row][col] % 10 == 6)
									gc.drawImage(assets.spiketrap, col * pixel - xoffset, row * pixel - yoffset, pixel,
											pixel);

								if (map[row][col] % 10 == 7) {
									if (sp1.draw || sp2.draw || sp3.draw || sp4.draw || sp5.draw || sp6.draw || sp7.draw
											|| sp8.draw)
										gc.drawImage(assets.spiketrap2, col * pixel - xoffset, row * pixel - yoffset,
												pixel, pixel);
								}
								break;

							}
						}
					}
					int centerX = Maskx * pixel - xoffset + (pixel / 2);
					int centerY = Masky * pixel - yoffset + (pixel / 2);

					if (DrawMask == true) {
						if (MaskD == 1) {
							gc.setRotation(180, centerX, centerY);
						} else if (MaskD == 2) {
							gc.setRotation(90, centerX, centerY);
						} else if (MaskD == 3) {
							gc.setRotation(0, centerX, centerY);
						} else if (MaskD == 4) {
							gc.setRotation(270, centerX, centerY);
						}
						gc.drawImage(assets.mask, Maskx * pixel - xoffset, Masky * pixel - yoffset, pixel, pixel);
						gc.clearRotation();
					}

					// Lava
					if (Lava) {
						if (ticks % 20 == 0) {
							gc.setColor(Color.CYAN);
						} else if (ticks % 10 == 0) {
							gc.setColor(Color.MAGENTA);
						}
						gc.fillRect(0, Lavay, 1000, 750);
						if (ticks % 2 == 0)
							Lavay -= LavaSpeed;
					}

					if (Finish) {
						break;
					}

					if (Life < 1) {
						Dead = true;
						Start = false;
						break;
					}

				}

				Thread.sleep(delay);
				if (map != maps.start) {
					// User Input
					if (Move == false) {
						if (gc.isKeyDown('W') || gc.isKeyDown(GraphicsConsole.VK_UP)) {
							MaskD = 1;
						} else if (gc.isKeyDown('A') || gc.isKeyDown(GraphicsConsole.VK_LEFT)) {
							MaskD = 2;
						} else if (gc.isKeyDown('S') || gc.isKeyDown(GraphicsConsole.VK_DOWN)) {
							MaskD = 3;
						} else if (gc.isKeyDown('D') || gc.isKeyDown(GraphicsConsole.VK_RIGHT)) {
							MaskD = 4;
						}
					}
					// Enter to buy shield
					if (gc.isKeyDown(GraphicsConsole.VK_ENTER)) {
						if (Life == 1 && (Balance >= 100) && Shield == false) {
							Life++;
							// System.out.println("SHIELD ++ " + Life);
							Balance -= 100;
							Shield = true;
						}
					}
					// ESC to pause
					if (gc.isKeyDown(GraphicsConsole.VK_ESCAPE)) {
						// M to mute
						if (gc.isKeyDown('M')) {
							Audio = false;
						}
					}

					// Updates
					Origin = map[Masky][Maskx];
					Up = map[Masky - 1][Maskx];
					Left = map[Masky][Maskx - 1];
					Down = map[Masky + 1][Maskx];
					Right = map[Masky][Maskx + 1];

					if (Move) {
						switch (MaskD) {
						case 0:
							Move = false;
							break;
						case 1:
							Masky--;
							break;
						case 2:
							Maskx--;
							break;
						case 3:
							Masky++;
							break;
						case 4:
							Maskx++;
							break;
						}
					}

					ticks++;
					if (ticks % (1000 / delay) == 0) {
						seconds++;
						System.out.println("-------------------------" + seconds);
						System.out.println("X: " + Maskx);
						System.out.println("Y: " + Masky);
						System.out.println("$: " + Balance);
						System.out.println("L: " + Life);
						System.out.println("Spiketicks: " + spiketicks);
					}
					if (ticks % (100 / delay) == 0) {
						maskticks++;
						animationticks++;
						SFX = true;
					}

					if (sp1.active) {
						if (sp1.countdown > 0)
							sp1.countdown--;
						System.out.println("Countdown: " + sp1.countdown);
						if (sp1.countdown == 0) {
							sp1.draw = true;
							if (sp1.countdown<10)
							sp1.countdown++;
							sp1.draw = false;
						}
					}

					if (animationticks > 4)
						animationticks = 1;
					if (animationticks == 4) {
						assets.star = Toolkit.getDefaultToolkit()
								.getImage(main.gc.getClass().getClassLoader().getResource("sources/star4.png"));

						assets.coin = Toolkit.getDefaultToolkit()
								.getImage(main.gc.getClass().getClassLoader().getResource("sources/coin4.png"));

						assets.exit = Toolkit.getDefaultToolkit()
								.getImage(main.gc.getClass().getClassLoader().getResource("sources/exit3.png"));
					} else if (animationticks == 3) {
						assets.star = Toolkit.getDefaultToolkit()
								.getImage(main.gc.getClass().getClassLoader().getResource("sources/star3.png"));

						assets.coin = Toolkit.getDefaultToolkit()
								.getImage(main.gc.getClass().getClassLoader().getResource("sources/coin3.png"));

						assets.exit = Toolkit.getDefaultToolkit()
								.getImage(main.gc.getClass().getClassLoader().getResource("sources/exit3.png"));
					} else if (animationticks == 2) {
						assets.star = Toolkit.getDefaultToolkit()
								.getImage(main.gc.getClass().getClassLoader().getResource("sources/star2.png"));

						assets.coin = Toolkit.getDefaultToolkit()
								.getImage(main.gc.getClass().getClassLoader().getResource("sources/coin2.png"));

						assets.exit = Toolkit.getDefaultToolkit()
								.getImage(main.gc.getClass().getClassLoader().getResource("sources/exit2.png"));
					} else if (animationticks == 1) {
						assets.star = Toolkit.getDefaultToolkit()
								.getImage(main.gc.getClass().getClassLoader().getResource("sources/star1.png"));

						assets.coin = Toolkit.getDefaultToolkit()
								.getImage(main.gc.getClass().getClassLoader().getResource("sources/coin1.png"));

						assets.exit = Toolkit.getDefaultToolkit()
								.getImage(main.gc.getClass().getClassLoader().getResource("sources/exit1.png"));
					}

					if (Move == false) {
						if (maskticks > 6)
							maskticks = 1;
						if (maskticks == 6) {
							assets.mask = Toolkit.getDefaultToolkit()
									.getImage(main.gc.getClass().getClassLoader().getResource("sources/mask6.png"));
						} else if (maskticks == 5) {
							assets.mask = Toolkit.getDefaultToolkit()
									.getImage(main.gc.getClass().getClassLoader().getResource("sources/mask5.png"));
						} else if (maskticks == 4) {
							assets.mask = Toolkit.getDefaultToolkit()
									.getImage(main.gc.getClass().getClassLoader().getResource("sources/mask4.png"));
						} else if (maskticks == 3) {
							assets.mask = Toolkit.getDefaultToolkit()
									.getImage(main.gc.getClass().getClassLoader().getResource("sources/mask3.png"));
						} else if (maskticks == 2) {
							assets.mask = Toolkit.getDefaultToolkit()
									.getImage(main.gc.getClass().getClassLoader().getResource("sources/mask2.png"));
						} else if (maskticks == 1) {
							assets.mask = Toolkit.getDefaultToolkit()
									.getImage(main.gc.getClass().getClassLoader().getResource("sources/mask1.png"));
						}
					} else {
						assets.mask = Toolkit.getDefaultToolkit()
								.getImage(main.gc.getClass().getClassLoader().getResource("sources/ball.png"));
					}

					// Collision Detection

					if (map[Masky][Maskx] == 1) {
						map[Masky][Maskx] = 0;
						Balance++;
					} else if (map[Masky][Maskx] == 2) {
						map[Masky][Maskx] = 0;
						Balance += 5;
						if (Audio)
							gc.playSound(assets.scoin);
					} else if (map[Masky][Maskx] == 3) {
						map[Masky][Maskx] = 0;
						Balance += 10;
						if (Audio)
							gc.playSound(assets.sstar);
					} else if (map[Masky][Maskx] == 4) {
						Finish = true;
						map[Masky][Maskx] = 0;
						if (Audio)
							gc.playSound(assets.sexit);
						break;
					}

					if ((Up % 10 == 6) || (Left % 10 == 6) || (Down % 10 == 6) || (Right % 10 == 6)) {
						if (Up == 16 || Left == 16 || Down == 16 || Right == 16)
							sp1.active = true;
						else if (Up == 26 || Left == 26 || Down == 26 || Right == 26)
							sp2.active = true;
						else if (Up == 36 || Left == 36 || Down == 36 || Right == 36)
							sp3.active = true;
						else if (Up == 46 || Left == 46 || Down == 46 || Right == 46)
							sp4.active = true;
						else if (Up == 56 || Left == 56 || Down == 56 || Right == 56)
							sp5.active = true;
						else if (Up == 66 || Left == 66 || Down == 66 || Right == 66)
							sp6.active = true;
						else if (Up == 76 || Left == 76 || Down == 76 || Right == 76)
							sp7.active = true;
						else if (Up == 86 || Left == 86 || Down == 86 || Right == 86)
							sp8.active = true;
						
						if (sp1.draw) {
							Origin = 17;
						}
						if (sp2.draw) {
							Origin = 27;
						}
						if (sp3.draw) {
							Origin = 37;
						}
						if (sp4.draw) {
							Origin = 47;
						}
						if (sp5.draw) {
							Origin = 57;
						}
						if (sp6.draw) {
							Origin = 67;
						}
						if (sp7.draw) {
							Origin = 77;
						}
						if (sp8.draw) {
							Origin = 87;
						}
						
					}

					// Collision Detection
					if (MaskD == 1) {
						if (map[Masky - 1][Maskx] != 9 && map[Masky - 1][Maskx] % 10 != 6
								&& map[Masky - 1][Maskx] != 5) {
							Move = true;
							if (SFX) {
								gc.playSound(assets.sjump);
								SFX = false;
							}
						} else if (map[Masky - 1][Maskx] == 5 || map[Masky - 1][Maskx] % 10 == 7) {
							Life--;
							Shield = false;
							MaskD = 0;
						} else {
							Move = false;
						}
					} else if (MaskD == 2) {
						if (map[Masky][Maskx - 1] != 9 && map[Masky][Maskx - 1] % 10 != 6
								&& map[Masky][Maskx - 1] != 5) {
							Move = true;
							if (SFX) {
								gc.playSound(assets.sjump);
								SFX = false;
							}
						} else if (map[Masky][Maskx - 1] == 5 || map[Masky][Maskx - 1] % 10 == 7) {
							Life--;
							Shield = false;
							MaskD = 0;
						} else {
							Move = false;
						}
					} else if (MaskD == 3) {
						if (map[Masky + 1][Maskx] != 9 && map[Masky + 1][Maskx] % 10 != 6
								&& map[Masky + 1][Maskx] != 5) {
							Move = true;
							if (SFX) {
								gc.playSound(assets.sjump);
								SFX = false;
							}
						} else if ((map[Masky + 1][Maskx] == 5 || map[Masky + 1][Maskx] % 10 == 7)) {
							Life--;
							Shield = false;
							MaskD = 0;
						} else {
							Move = false;
						}
					} else if (MaskD == 4) {
						if (map[Masky][Maskx + 1] != 9 && map[Masky][Maskx + 1] % 10 != 6
								&& map[Masky][Maskx + 1] != 5) {
							Move = true;
							if (SFX) {
								gc.playSound(assets.sjump);
								SFX = false;
							}
						} else if ((map[Masky][Maskx + 1] == 5 || map[Masky][Maskx + 1] % 10 == 7)) {
							Life--;
							Shield = false;
							MaskD = 0;
						} else {
							Move = false;
						}
					}

					// Scroll the screen up/down/left/right to keep the character on-screen

					int xposition = Maskx * pixel;
					int yposition = Masky * pixel;
					if (xoffset > xposition - MARGIN) {
						xoffset = xposition - MARGIN;
						if (xoffset < 0)
							xoffset = 0;
					}

					if (xoffset < xposition - mapX + MARGIN + pixel) {
						xoffset = xposition - mapX + MARGIN + pixel;
						if (xoffset > XBLOCKS * pixel - mapX)
							xoffset = XBLOCKS * pixel - mapX;
					}

					if (yoffset > yposition - MARGIN) {
						yoffset = yposition - MARGIN;
						if (yoffset < 0)
							yoffset = 0;
					}

					if (yoffset < yposition - mapY + MARGIN + pixel) {
						yoffset = yposition - mapY + MARGIN + pixel;
						if (yoffset > YBLOCKS * pixel - mapY)
							yoffset = YBLOCKS * pixel - mapY;
					}
				}

				if (map == maps.start) {
					gc.setCursor(10, 10);
					Lava = false;
					Lavay = mapY;

					int[][] nextLevel = levelSelect(gc.getMouseClick(), pixelstart, lvlw, lvlh);
					if (nextLevel != null) {
						map = nextLevel;
						DrawMask = true;
						gc.playSound(assets.sstart);
						if (map == stages.map1) {
							Lava = false;
							Maskx = 17;
							Masky = 36;
						}
						if (map == stages.map2) {
							Lava = false;

							Maskx = 14;
							Masky = 16;
						}
						if (map == stages.map3) {
							Lava = false;

							Maskx = 5;
							Masky = 20;
						}
						if (map == stages.map4) {
							Lava = true;
							Maskx = 5;
							Masky = 44;
						}
						if (map == stages.map5) {
							Lava = false;
							Maskx = 19;
							Masky = 34;
						}
						if (map == stages.map6) {
							Lava = false;

							Maskx = 19;
							Masky = 35;
						}
					}
				}
			}

			while (Finish) {
				MaskD = 0;
				Move = false;
				DrawMask = false;
				// Map Transition (for tester)
				if (map == maps.map1) {
					map = maps.start;
					maps.map1 = assets.ogmap1;
					// System.out.println("Stage2---------------------");
				} else if (map == maps.map2) {
					map = maps.start;
					maps.map2 = assets.ogmap2;
					// System.out.println("Stage3---------------------");
				} else if (map == maps.map3) {
					map = maps.start;
					maps.map3 = assets.ogmap3;
					// System.out.println("Stage4---------------------");
				} else if (map == stages.map4) {
					map = maps.start;
					maps.map4 = assets.ogmap4;
					// System.out.println("Stage5---------------------");
				} else if (map == stages.map5) {
					map = maps.start;
					maps.map5 = assets.ogmap5;
					// System.out.println("Stage6---------------------");
				} else if (map == stages.map6) {
					map = maps.start;
					maps.map6 = assets.ogmap6;
					// System.out.println("Stage1---------------------");
				} else if (map == stages.start) {

				}
				Finish = false;
				Start = true;
				break;
			}

			while (Dead) {
				System.out.println("dead");
				gc.getChar();
				break;

			}

		}

	}

	static int[][] levelSelect(int mouseclick, int pixelstart, int lvlw, int lvlh) {
		int[][] map = null;
		if (mouseclick == 0) {
			return map;
		}
		int mouseX = gc.getMouseX();
		int mouseY = gc.getMouseY();
		if ((mouseclick <= 1) && (4 * pixelstart < mouseX) && (mouseX < 5 * pixelstart + lvlw)
				&& (13 * pixelstart < mouseY) && (mouseY < 14 * pixelstart + lvlh)) {
			map = stages.map1;
		} else if ((mouseclick <= 1) && (4 * pixelstart < mouseX) && (mouseX < 5 * pixelstart + lvlw)
				&& (22 * pixelstart < mouseY) && (mouseY < 23 * pixelstart + lvlh)) {
			map = stages.map2;
		} else if ((mouseclick <= 1) && (15 * pixelstart < mouseX) && (mouseX < 16 * pixelstart + lvlw)
				&& (22 * pixelstart < mouseY) && (mouseY < 23 * pixelstart + lvlh)) {
			map = stages.map3;
		} else if ((mouseclick <= 1) && (15 * pixelstart < mouseX) && (mouseX < 16 * pixelstart + lvlw)
				&& (12 * pixelstart < mouseY) && (mouseY < 13 * pixelstart + lvlh)) {
			map = stages.map4;
		} else if ((mouseclick <= 1) && (26 * pixelstart < mouseX) && (mouseX < 27 * pixelstart + lvlw)
				&& (12 * pixelstart < mouseY) && (mouseY < 13 * pixelstart + lvlh)) {
			map = stages.map5;
		} else if ((mouseclick <= 1) && (26 * pixelstart < mouseX) && (mouseX < 27 * pixelstart + lvlw)
				&& (22 * pixelstart < mouseY) && (mouseY < 23 * pixelstart + lvlh)) {
			map = stages.map6;
		}
		return map;
	}

}
